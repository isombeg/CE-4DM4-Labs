function runTable = make_run_table(bitStream, run_type)
    % Inputs:
    % bitStream: The random number data out bitstream generated by the LSFR
    % run_type: 0-run or 1-run

    % Output:
    % runTable: The 4-row table we need to generate as part of A5) and A6)

    % Initialize a matrix for the run table
    runTable = zeros(4,24);

    % row 1
    runTable(1, :) = 1:24;

    % row 2
    for i = 1:24
        runTable(2, i) = find_k_run_count(bitStream, i, run_type);
    end

    % total runs
    sum_of_all_observed_runs = sum(runTable(2,:));

    % row 3
    for i = 1:24
        runTable(3, i) = runTable(2, i)/sum_of_all_observed_runs;
    end

    % row 4 
    % Probability of a 1 or a 0 is 50% each. So the probability of getting 
    % k number of 0s or 1s in a row is (0.5)^k 
    for i = 1:24
        runTable(4, i) = 0.5^i;
    end
end

function kRunCount = find_k_run_count(bitStream, k, run_type)
    % Inputs:
    % bitStream: The random number data out bitstream generated by the LSFR
    % k: The length of the 0 or 1 run we are searching for
    % run_type: 0-run or 1-run

    % Output:
    % kRunCount: Returns the count of k 0/1-runs in the bitStream used for
    % row 2 of the run table

    if run_type == 0
        % Creates a vector of length k+2 to surround the 0-run with a pair
        % of 1s. e.g if k = 2, we are searching for '1 0 0 1'
        run = zeros(1, k+2);
        run(1) = 1;
        run(end) = 1;
    else
        % Creates a vector of length k+2 to surround the 1-run with a pair
        % of 0s. e.g if k = 1, we are searching for '0 1 0'
        run = ones(1, k+2);
        run(1) = 0;
        run(end) = 0;
    end
    % strfind() finds all occurrences of a sequence in another sequence and
    % returns a vector containing all indexes where there is a match. We
    % use the size() function to the total count.
    kRunCount = size(strfind(bitStream, run), 2);
end